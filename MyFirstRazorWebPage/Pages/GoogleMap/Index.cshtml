@page
@model MyFirstRazorWebPage.Pages.GoogleMap.IndexModel
@{
    ViewData["Title"] = "Google Map";
}

<h1>My Google Map Example</h1>

<div id="map" style="width:70vw; height: 70vh; background-color:grey; margin:auto;"></div>
<p id="location">Current location is here!</p>

<!-- We are going to change this, to load the <script> using ASP assets manager --> 
<!--<script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNS6tsvRWNeCkHyvMc7I4gFkEsILPdLE4&callback=initMap">
    </script>-->

<!-- You have "shared" code for all your cshtml pages. That shared code is in your "Shared/_Layout.cshtml"
So, the _Layout.cshtml is the common design for all pages. This page has several "Sections" inside
For Header, Content, etc. One of that sections is "Scripts", because in an HTML, Scripts should be just before
the </body> close tag. When you want to say to the _Layout.cshtml that you want load a specific JS file,
you can use this form, and when ASP render the page, will add the content of Section scripts in the correct place.
Take a look on the line 55 of your _Layout.cshtml, and you will see this statement: 
/// AT SIMBOL //// RenderSection("Scripts", required: false)-->
@section Scripts {
<script type="text/javascript"
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNS6tsvRWNeCkHyvMc7I4gFkEsILPdLE4"></script>

<script>
    var map, infoWindow;

    function initMap() {
        alert("I'm launching iniMap");
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 7
        });
        alert("I've rendered a new map");


        infoWindow = new google.maps.InfoWindow;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                infoWindow.setPosition(pos);
                infoWindow.setContent('Hey! You are here!!');
                infoWindow.open(map);
                map.setCenter(pos);

            }, function () {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }

    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
            'Error: The Geolocation service failed.' :
            'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
    }

    // When DOM is loaded, will run the initMap method
    // We do this instead of the callback from Google
    // because I think that the problem is that the library is not being
    // loaded in the correct order
    google.maps.event.addDomListener(window, 'load', initMap);

</script>
}
